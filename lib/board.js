'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Board = exports.Board = function () {
  function Board(numberOfRows, numberOfColumns, numberOfBombs) {
    _classCallCheck(this, Board);

    this._numberOfBombs = numberOfBombs;
    // numberOfTiles = number of LIVE tiles not yet flipped
    this._numberOfTiles = numberOfRows * numberOfColumns;
    this._playerBoard = Board.generatePlayerBoard(numberOfRows, numberOfColumns);
    this._bombBoard = Board.generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs);
    //generateBombBoard
  }

  _createClass(Board, [{
    key: 'flipTile',


    //used to be flipTile = (rowIndex, columnIndex) => {
    value: function flipTile(rowIndex, columnIndex) {
      if (this._playerBoard[rowIndex][columnIndex] != ' ') {
        console.log("This tile has already been flipped!");
        return;
      } else if (this._bombBoard[rowIndex][columnIndex] === 'B') {
        this._playerBoard[rowIndex][columnIndex] = 'B';
      } else {
        this._playerBoard[rowIndex][columnIndex] = this.getNumberOfNeighborBombs(rowIndex, columnIndex);
      }
      this._numberOfTiles--;
    }

    // This was hard - but I got it nowjava

  }, {
    key: 'getNumberOfNeighborBombs',
    value: function getNumberOfNeighborBombs(rowIndex, columnIndex) {
      var _this = this;

      var neighborOffsets = [[-1, -1], [-1, 0], [-1, 0], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

      var numberOfRows = this._bombBoard.length;
      /* because the board generated by 
      generateBombBoard is a 2D array - the first layer of array values = # of rows */
      var numberOfColumns = this._bombBoard[0].length; // how many values in first row
      var numberOfBombs = 0;

      /* this runs on EVERY element in the array, aka [1, -1] is ONE element.
      The first parameter in foreach(), aka offset here, represents the 
      current element in the array that foreach() is iterating through. 
      rowIndex and columnIndex is the row/column of the tile the player's flipping. */
      neighborOffsets.forEach(function (offset) {

        /* offset[0] means the row offset, offset[1] means the column offset,
        because each element in the neighborOffsets array has 2 elements (aka [-1, -1]). */
        var neighborRowIndex = rowIndex + offset[0];
        var neighborColumnIndex = columnIndex + offset[1];

        // check if the neighbor cell selected is off the board or not
        if (neighborRowIndex >= 0 && neighborRowIndex < numberOfRows && neighborColumnIndex >= 0 && neighborColumnIndex < numberOfColumns) {
          if (_this._bombBoard[neighborRowIndex][neighborColumnIndex] === 'B') {
            numberOfBombs++;
          }
        }
      }); // this ends the parameters for the forEach() method
      return numberOfBombs;
    } // end getNumberOfNeighborBombs method

  }, {
    key: 'hasSafeTiles',
    value: function hasSafeTiles() {
      return this._numberOfTiles != this._numberOfBombs;
    }

    /* Instructions say to Make sure to reference instance properties 
    using this and underscores (this should be a matter of simply adding 
    this to existing variable names in the function, like playerBoard) */

  }, {
    key: 'print',
    value: function print() {
      console.log(this._playerBoard.map(function (row) {
        return row.join(' | ');
      }).join('\n'));
    }

    /* original print() method
    print(printInput) {
      console.log(printInput.map(row => row.join(' | ')).join('\n'));
    }
    */

  }, {
    key: 'playerBoard',
    get: function get() {
      return this._playerBoard;
    }
  }], [{
    key: 'generatePlayerBoard',
    value: function generatePlayerBoard(numberOfRows, numberOfColumns) {
      var board = [];
      for (var rowCounter = 0; rowCounter < numberOfRows; rowCounter++) {
        var row = [];
        for (var colCounter = 0; colCounter < numberOfColumns; colCounter++) {
          row.push(' ');
        }
        board.push(row);
      } // row generator
      return board;
    } // end generatePlayerBoard method

    // originally NOT static, was getting error that it wasn't a function

  }, {
    key: 'generateBombBoard',
    value: function generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs) {
      var board = [];
      // fill in the first row with empty values, then repeat
      for (var rowCounter = 0; rowCounter < numberOfRows; rowCounter++) {
        var row = [];
        // fill in each cell in the current row.  when row is full, exit this
        for (var colCounter = 0; colCounter < numberOfColumns; colCounter++) {
          row.push(null);
        }
        board.push(row);
      } // row generator
      var numberOfBombsPlaced = 0;
      while (numberOfBombsPlaced < numberOfBombs) {
        var randomRowIndex = Math.floor(Math.random() * numberOfRows);
        var randomColIndex = Math.floor(Math.random() * numberOfColumns);
        if (board[randomRowIndex][randomColIndex] != 'B') {
          board[randomRowIndex][randomColIndex] = 'B';
          numberOfBombsPlaced++;
        }
      }
      return board;
    } // end generateBombBoard method

  }]);

  return Board;
}(); // end Board class